### Building R packages step by step (based on 2019 John Muschelli)
# =====================================================================
------------------
## Old ways to build a R package
------------------
* MOOC/Udemy/Advanced R/BuildPackage
* MOOC/Coursera/DataSciecne/DataProducts/Developing_Data_Products (Roger Peng version)


------------------
## slides
------------------
https://johnmuschelli.com/smi_2019/

------------------
## Useful packages
------------------
* library(available): Checks CRAN/Bioconductor/GitHub for potentially similar package names
* library(usethis):
* library(devtools): use devtools to build an R package
* library(roxygen2): allows for functions and documentation in the same file



------------------
## Packages names
------------------
* start with letter
* no underscores
* periods allowable or use CamelCase
* can have numbers
* should be Google-able
My solution: use all small letters unless acronym


------------------
## Building steps
------------------
* File -> New Project -> New Directory -> R Package using devtools
* Build -> Clean and Rebuild (have a package installed)
* Build -> Configure Build Tools -> Add --as-cran to “Check Package”
* Build -> Configure Build Tools -> check Generate documentation with roxygen2
  -> Configure -> check all items
* Open and edit DESCRIPTION  (read DESCRIPTION section)
* One function in one R script and put all R scripts in the /R folder
* Edit using roxygen
* In each R script file, Code -> Insert Roxygen Skeleton (read Roxygen section)
* Building the NAMESPACE with roxygen
* You do not have library() functions in R package code
* You should import anything explicitly other than from the base package, includying anything from stats (e.g. quantile) or graphics (e.g. hist). Don’t import base
*



------------------
## DESCRIPTION
------------------
* Title:
-- Title Case and make sure to put single quotes around weird words.
-- do not start with R package or Package

* Description:
-- a sentence (prose) and it ends with a period.
-- put links in angle brackets (<http...>)
-- Use DOIs if you can (<doi...>)
-- indent it with 4 spaces and go to the next

* Imports: package1, package2
-- packages with functions we need in code

* Depends: package3, package5 (Not recommended)
-- ALL functions loaded from package, but loaded in user library before your package

* Suggests: package4, package6
-- used in examples or vignettes

* Authors@R: c(person(given = "John",
           family = "Muschelli",
           role = c("aut", "cre"),
           email = "muschellij2@gmail.com",
           comment = c(ORCID = "0000-0001-6469-1750")),
           person(given = "John2",
           family = "Muschelli2",
           role = c("aut"),
           email = "muschellij2@gmail.com",
           comment = c(ORCID = "0000-0001-6469-1750")), ...)

* cre - creator/maintainer, can only have one

* aut = author, can have multiple (check ?person)

* keep field -- Maintainer: John Muschelli <muschellij2@gmail.com>

* License: GPL-3


------------------
## Roxygen
## https://kbroman.org/pkg_primer/pages/docs.html
## https://cran.r-project.org/web/packages/roxygen2/vignettes/roxygen2.html
------------------
* Roxygen header in each R script will turn into a help file
* @param -- stands for a parameter/argument for that function
* @return -- denotes what the function returns. This is required.
* @export -- can this function be used after install the package
          -- non-exported functions are usually helpers, really small, or not
fully formed yet
          -- adds this to the NAMESPACE file
* @examples -- Wrap functions in \dontrun{} if not wanted to run and \donttest{} for not testing
            -- make sure \dontrun{} not \dontrun {}
* separate @title and @description
#' @title Print the top of a matrix
#' @description \code{top} is a small function to not just present the first rows
* usethis::use_roxygen_md(): use markdown with roxygen2
* @importFrom - if you want to import a function, you say @import PACKAGENAME func1 func2 -- only imports these functions (preferred to @import)
* if pkgA has function A and pkgB has functions A and B, if @import pkgA A, @import pkgB B, then if you call A(), R knows it’s from pkgA
* But should use pkgA::A() in practice
* You only have to import a whole package or a package function, don’t mix and match
* You only have to import a function in one file
* Any package you want to import, make sure you use use_package()
* You don’t export data.

*



------------------
## NAMESPACE
------------------

------------------
## Documenting Data
------------------
* usethis::use_data_raw(): if you have code to generate data
* usethis::use_data(x, y): make a data/x.rda and a data/y.rda
#' My Awesome Data Set
#'
#' A more detailed description
#'
#' @format A `data.frame` with 2 columns elements, which are:
#' \describe{
#' \item{x1}{column of x variables}
#' \item{y2}{column of yvariables}
#' }
"mydata_set"


------------------
## Creating Vignettes
------------------
usethis::use_vignette("my-vignette")
* title is on the document
* VignetteIndexEntry is on the website

------------------
## Creating a README
------------------
usethis::use_readme_rmd()
* create a README.Rmd file for your GitHub/Package
* GitHub renders the README.
* Instructions on how to use the package (examples)
* Instructions on installing 3rd-party dependencies
* knit -> Tools -> Version Control -> commit



------------------
## Creating NEWS.md
------------------
usethis::use_news_md(): update with new versions of the package, discussing changes (CRAN Requires).



* devtools::spell_check(): check some spelling
* spelling::update_wordlist(): make a WORDLIST file

------------------
Continuous Integration: Testing on the Cloud
------------------
usethis::use_git()
usethis::use_github() # must have GITHUB_PAT set up
usethis::use_travis()














